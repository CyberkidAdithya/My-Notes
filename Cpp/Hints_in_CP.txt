ARRAYS:
    Reversing an array:
        Techniques:
            Kadane's algorithm
            Two pointers
        Changes
            Indices of elements change
        Constant
            Array Sum
            Sum of every pair of adjacent elements  
        Properties:
            For an array to have zero as its bitwise AND, at least one of the elements must have offbit
            In problems related to Kadane's algorithm, always look for Local and Global Maxima/Minima values
            To make the traversal through an array in circular fashion just do index_value % array_length in the loop
            Reversing an entire increasing permutation array [1,2,3...,N-2,N-1,N] will reduce the number of prefix permutations present in it to 1 [N,N-1,N-2,...3,2,1]
    Sorted array:
        Techniques:
            Binary Search
        Properties:
            in Two pointers Sum for finding a pair (x, y) that sums to z, moving head pointer forward increases the sum and moving tail pointer backward decreases sum 
            all the prefix subarrays are permutations if array is of the form [1,2,3...N-2,N-1,N]
    Circular array:
        Techniques:
            Look out for modulo properties

LINKED LISTS:
    Pointers:
        Techniques:
            Converting the Linked List to a Circular Linked List (tail.next = head) and then changing any node's next pointer to None (prev.next = None && head = curr.next) will rotate the Linked List making that particular node as the head node.
            The maximum rotations k allowed on a linkedlist list is its size n, beyond which linked list starts repeating (k %= n) 
STACKS:
    Pushing and Popping:
        Techniques:
            Balancing Parentheses
            Infix to Postfix Conversion
            Evaluation of Expressions
        Properties:
            Operations are usually dependent on the (previous) last element in the array
            All operations [push, pop, peek] have O(1) time complexity
            Usually stacks are used to remember indices, that is, memoization of indices to avoid O(nÂ²)
            Some problems having exponential time complexity can be solved in linear time O(n) using Stacks (even with a inner while loop running, since N + N = 2N ==> O(N) only)
            Best way to order the given set of brackets { "((", "))", "()", ")(" } to make a valid bracket sequence string: all strings ((, then all strings (), then all strings )(, then all strings ))
            To always retrieve the maximum element from the stack in O(1), always push max(stack[-1], new_element) into the non empty stack instead of pushing new_element directly
            adding "()" anywhere to a balanced bracket sequence won't affect the balanced state
            adding ")(" to a balanced bracket sequence also won't affect the balanced state if it is enclosed by at least one "((" and "))"
            Stacks can be used to convert an array with contiguous repeating elements to an array without any contiguous repeating elements (sequeezing the array)
            
GRIDS:
    Traversal:
        properties:
            Never forget to check if the cell is a part of the declared grid or not (using a isValid(x1, y1) function for the row-column indices
    
GRAPHS:
    Implementation:
        Using adjacency lists - Sparse graph (fewer connections/edges)
        Using adjacency matrix - Dense graph (many connections/edges)
    Traversal
        Properties
            The algorithm can be understood as a fire spreading on the graph
            Breadth First Search (BFS) <-----> Level Order Traversal <-----> Shortest Path (and distance) from Single Source to Destination in an undirected graph
            BFS - Iterative implementation - using Queue
            DFS - Recursive implementation - using Stack
        
