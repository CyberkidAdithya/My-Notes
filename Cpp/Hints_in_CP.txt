ARRAYS:
    Reversing an array:
        Techniques:
            Kadane's algorithm
            Two pointers
        Changes
            Indices of elements change
        Constant
            Array Sum
            Sum of every pair of adjacent elements  
        Properties:
            For an array to have zero as its bitwise AND, at least one of the elements must have offbit
    Sorted array:
        Techniques:
            Binary Search
        Properties:
            in Two pointers Sum for finding a pair (x, y) that sums to z, moving head pointer forward increases the sum and moving tail pointer backward decreases sum 
    Circular array:
        Techniques:
            Look out for modulo properties

STACKS:
    Pushing and Popping:
        Techniques:
            Balancing Parentheses
            Infix to Postfix Conversion
            Evaluation of Expressions
        Properties:
            Operations are usually dependent on the (previous) last element in the array
            Best way to order the given set of brackets { "((", "))", "()", ")(" } to make a valid bracket sequence string: all strings ((, then all strings (), then all strings )(, then all strings ))
            To always retrieve the maximum element from the stack in O(1), always push max(stack[-1], new_elemenet) into the non empty stack instead of pushing new_element directly
            adding "()" anywhere to a balanced bracket sequence won't affect the balanced state
            adding ")(" to a balanced bracket sequence also won't affect the balanced state if it is enclosed by at least one "((" and "))"
            Stacks can be used to convert an array with contiguous repeating elements to an array without any contiguous repeating elements (sequeezing the array)
            
GRIDS:
    Traversal:
        properties:
            Never forget to check if the cell is a part of the declared grid or not (using a isValid(x1, y1) function for the row-column indices
    
